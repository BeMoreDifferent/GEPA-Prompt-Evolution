[
    {
        "id": "polya-4step",
        "hint": "Apply Pólya’s 4 steps: Understand, Plan, Execute, Reflect. Restate task, outline minimal plan, do it, then brief self-check."
    },
    {
        "id": "first-principles",
        "hint": "Reduce to primitives; identify governing constraints; rebuild solution from basics; quantify assumptions."
    },
    {
        "id": "mece-structuring",
        "hint": "Organize content using MECE categories (mutually exclusive, collectively exhaustive); avoid overlap and cover the space."
    },
    {
        "id": "crisp-dm",
        "hint": "For data work, follow CRISP-DM: business understanding, data understanding, prep, modeling, evaluation, deployment."
    },
    {
        "id": "sixsigma-dmaic",
        "hint": "Process improvement: Define→Measure→Analyze→Improve→Control; baseline KPIs, verify root causes, pilot fixes, lock in control plan."
    },
    {
        "id": "lean-startup-bml",
        "hint": "For product uncertainty, run Build–Measure–Learn loops; define MVP + falsifiable hypotheses; pivot/persevere based on evidence."
    },
    {
        "id": "cynefin-sensemaking",
        "hint": "Classify context (obvious/complicated/complex/chaotic); choose matching approach (best practice/expert analysis/safe‑to‑fail probes/act‑sense‑respond)."
    },
    {
        "id": "ooda-loop",
        "hint": "For fast-changing/adversarial contexts, iterate OODA: Observe, Orient, Decide, Act; shorten loop via small probes; adapt on feedback."
    },
    {
        "id": "backcasting",
        "hint": "Start from desired end‑state; work backward to milestones, policy/tech enablers; derive near‑term actions."
    },
    {
        "id": "kepner-tregoe",
        "hint": "Structured analysis: Situation Appraisal → Problem Analysis (Is/Is‑Not) → Decision Analysis (criteria/weights/risks) → Potential Problem Analysis."
    },
    {
        "id": "decision-tree-ev",
        "hint": "Map decision tree; attach probabilities/payoffs; compute expected value/utility; choose max EV; consider EVPI to bound research value."
    },
    {
        "id": "mcda-ahp",
        "hint": "When multiple criteria/stakeholders, use AHP: define hierarchy, pairwise compare, compute weights/consistency ratio, score options."
    },
    {
        "id": "value-of-information",
        "hint": "Compute EVPI/EVSI to decide if more data is worth it; if value < cost/time, proceed without further research."
    },
    {
        "id": "bayesian-updating",
        "hint": "Quantify belief and act under uncertainty: set prior, define likelihoods, compute posterior; act when posterior crosses decision threshold."
    },
    {
        "id": "systems-cld",
        "hint": "Sketch causal loop diagram; identify reinforcing/balancing loops; locate leverage points; design interventions."
    },
    {
        "id": "design-of-experiments",
        "hint": "Use DOE for learning: define factors/responses; choose design (full/fractional/orthogonal); run randomized/blocked; analyze effects."
    },
    {
        "id": "monte-carlo",
        "hint": "Quantify uncertainty: define input distributions; run Monte Carlo; report mean, intervals; highlight tail risks."
    },
    {
        "id": "sensitivity-analysis",
        "hint": "Test model robustness: OAT/local; global (Sobol/variance-based); report most influential inputs."
    },
    {
        "id": "fermi-estimate",
        "hint": "When unknown quantities appear, use Fermi estimation: list assumptions, compute order‑of‑magnitude, provide range and key drivers."
    },
    {
        "id": "dimensional-analysis",
        "hint": "For numeric/physics problems, add unit sanity checks and dimensional analysis; show conversions; flag mismatches."
    },
    {
        "id": "dp-optimal-substructure",
        "hint": "If overlapping subproblems/optimal substructure, define recurrence, memoize/tabulate; verify correctness by induction."
    },
    {
        "id": "branch-and-bound",
        "hint": "For combinatorial search, define bounds and branching; prune dominated regions; record incumbent; stop on proof of optimality."
    },
    {
        "id": "tdd-microcycle",
        "hint": "Coding help uses TDD micro-cycles: specify a tiny test (in prose), implement minimally, then refactor note."
    },
    {
        "id": "mape-k-control-loop",
        "hint": "For operational systems, set up MAPE‑K loop: Monitor→Analyze→Plan→Execute on Knowledge; define SLOs and automated actions."
    },
    {
        "id": "triage-scarcity",
        "hint": "When resources are scarce, triage by urgency/benefit (e.g., SALT): address ‘Immediate’ first; defer lower‑benefit cases."
    },
    {
        "id": "swiss-cheese",
        "hint": "Model layered defenses; find where ‘holes’ align; add/strengthen barriers and monitors to break accident trajectories."
    },
    {
        "id": "heuristic-evaluation-nielsen10",
        "hint": "For UX quality, run Nielsen’s 10 heuristics; log issues with severity (0–4) and quick fixes; tackle high‑severity first."
    },
    {
        "id": "causal-dag",
        "hint": "Draw DAG; identify confounders; apply backdoor/frontdoor criteria; specify causal estimand; avoid conditioning on colliders."
    },
    {
        "id": "com-b",
        "hint": "Design behavior change by mapping Capability, Opportunity, Motivation → Behavior; pick matching interventions (training, prompts, incentives, environment)."
    },
    {
        "id": "principled-negotiation",
        "hint": "Harvard method: separate people from problem, focus on interests, invent options, insist on objective criteria; know and improve BATNA."
    },
    {
        "id": "proportionality-test",
        "hint": "Before intrusive actions: test suitability, necessity, and proportionality (narrow balancing). Document why benefits justify burdens."
    },
    {
        "id": "toc-bottleneck",
        "hint": "Identify system constraint; exploit, subordinate, elevate; repeat; optimise only at bottleneck."
    }
]